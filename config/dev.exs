import Config

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we use it
# with webpack to recompile .js and .css sources.
config :email, Email.Endpoint,
  http: [port: 4000],
  debug_errors: true,
  code_reloader: true,
  check_origin: false,
  watchers: [
    node: [
      "node_modules/webpack/bin/webpack.js",
      "--mode",
      "development",
      "--watch-stdin",
      cd: Path.expand("../apps/email/assets", __DIR__)
    ]
  ]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Note that this task requires Erlang/OTP 20 or later.
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :email, Email.Endpoint,
  live_reload: [
    patterns: [
      ~r"priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"priv/gettext/.*(po)$",
      ~r"lib/email/{live,views}/.*(ex)$",
      ~r"lib/email/templates/.*(eex)$"
    ]
  ]

config :email, Email.Mailer,
  adapter: Bamboo.LocalAdapter

# Configure your database
config :core, Core.Repo,
  username: "postgres",
  password: "postgres",
  database: "piazza_dev",
  hostname: "localhost",
  show_sensitive_data_on_connection_error: true,
  pool_size: 10

config :core, Core.TestBroker,
  adapter: ConduitAMQP,
  url: "amqp://rabbitmq:rabbitmq@localhost"

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we use it
# with webpack to recompile .js and .css sources.
config :rtc, RtcWeb.Endpoint,
  http: [port: 4000],
  debug_errors: true,
  code_reloader: true,
  check_origin: false,
  watchers: [
    node: [
      "node_modules/webpack/bin/webpack.js",
      "--mode",
      "development",
      "--watch-stdin",
      cd: Path.expand("../assets", __DIR__)
    ]
  ]

# Watch static and templates for browser reloading.
config :rtc, RtcWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r"priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"priv/gettext/.*(po)$",
      ~r"lib/rtc_web/{live,views}/.*(ex)$",
      ~r"lib/rtc_web/templates/.*(eex)$"
    ]
  ]

config :gql, GqlWeb.Endpoint,
  http: [port: 4001],
  debug_errors: true,
  code_reloader: true,
  check_origin: false,
  watchers: [
    node: [
      "node_modules/webpack/bin/webpack.js",
      "--mode",
      "development",
      "--watch-stdin",
      cd: Path.expand("../assets", __DIR__)
    ]
  ]

# Watch static and templates for browser reloading.
config :gql, GqlWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r"priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"priv/gettext/.*(po)$",
      ~r"lib/rtc_web/{live,views}/.*(ex)$",
      ~r"lib/rtc_web/templates/.*(eex)$"
    ]
  ]

config :core, :consumers, [
  Core.PubSub.Consumers.Recurse,
  Core.PubSub.Consumers.Rtc,
]

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# test license
config :core,
  public_key: "-----BEGIN RSA PUBLIC KEY-----\nMIIBCgKCAQEA1pDbloUpsa4pz00Vldlo0lQF+mePFdM7y+eCc0NmT+3Oro2BQDsf\n9zvj1wl5SPnIcdoCEYh5NUgerc0ad9UtxKtRtiFEmb+5pC/EgZcJ1dHoKJdNKZD1\nft1Ko7mb/j3zYBR740/nepl679pXtcnoofsFAGw1BIcf1jyV+r1Vm7TnPP/rJGHf\n9+mC6XmRyFuG2KkE2VvKt4QiH/5t6wcw7nGDARzc7gAz7xvi2b3deX21ML4ghwhl\nRyJ2cNUNYLUJ8S/A1G/ssu0az+IjLIcXOwPbzaxuOW4y93nXE/1BGvdxYiRwYR/j\nVMnyB1RkSzwVi60f5pwk7dG7iEaoEf/+0QIDAQAB\n-----END RSA PUBLIC KEY-----\n\n",
  license: "kdyP4ho730tm7F0GN10pvuPTfkDBrKFbJLO-FeljttTCRdyrFze2_t4-XLJz2x5kWX-YgWuYG0ePuteGL9sk_4REhE5Y0iYXdTvb0_lxVCP_kjKIrJ4ehUO3LCOQZySD3jJ76jtn4J4o9SVMa6Bimx1cfSitR1x_Av7-fqpd5wY2stl-eGBqhVacL3TsdycDxFH2AEzo1VtD0sDsRvH0wF4QvedBuAaFWgMfUXd7hNRk1quAZYz5iu46TeZme3K7HLQx-9jGuRVaDZpnd2V6ZgRpTymMfAQXlGS9wNfWMBC0TjLrOiYhcO5Zviy3--6LGm-wvoy7Q04s2NlrDc_Bzg==::OZ0mGoa3IdeWWqu3_35y2f6X3DISQBZrv7ReWUgw3Y8SSOK0gqp4zZ77MWwqbyaBZBDL4n_Rz0-7oNJ3tKS-ItvpYgc-YZbepZAl38ZLOQ-KKaM8_AEP9EJ5PZKgd6D6hi2B9tW_nTsaDmVMufIrEBwmfS6IAFLUN3-XOyChthO4mdbbliCkTri3A6b3XgtCLuPX2JLFotMYbObrOr3780cmlEGhWpi_A545sxEWhQ2RwiOLyuyy8FfAjhZNhjSS0z2SYp_otwFO0zd9Ojrp7dH5pE1qg20qOZJNKXN5TIdDX2Iod2KQui8GGbjIu2axSro9huDDTW2Pl22PYA1PDM3ZLdiwrHmQ8BjI6POozkblslBaJZ5ybYHpYlcbATqK"

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime
